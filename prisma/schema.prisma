// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Room {
  id            String   @id @default(cuid())
  name          String?
  uniqueId      String   @unique
  password      String?  // bcrypt hashed
  createdAt     DateTime @default(now())
  expiresAt     DateTime
  firstJoinAt   DateTime?
  creatorId     String?
  maxUsers      Int      @default(10)
  isDeleted     Boolean  @default(false)
  durationHours Float    @default(24) // Duration in hours from first join
  
  creator      User?         @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  messages     Message[]
  participants Participant[]
  
  @@index([uniqueId])
  @@index([expiresAt])
  @@index([createdAt])
}

model Message {
  id        String   @id @default(cuid())
  roomId    String
  userId    String
  content   String   @db.Text
  type      String   @default("text") // text, image, video, audio, file, voice
  fileUrl   String?
  fileName  String?
  fileSize  Int?
  duration  Int?     // duration in seconds for voice/video messages
  createdAt DateTime @default(now())
  replyToId String?
  
  room      Room        @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      Participant @relation(fields: [userId], references: [id], onDelete: Cascade)
  reactions Reaction[]
  replyTo   Message?    @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
  replies   Message[]   @relation("MessageReplies")
  
  @@index([roomId, createdAt])
  @@index([userId])
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?   // bcrypt hashed for email/password auth
  provider      String?   // google, email, credentials
  createdAt     DateTime  @default(now())
  
  accounts     Account[]
  sessions     Session[]
  rooms        Room[]
  participants Participant[]
  
  @@index([email])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Participant {
  id          String   @id @default(cuid())
  roomId      String
  userId      String?  // nullable for anonymous users
  displayName String
  avatar      String   // URL or DiceBear seed
  joinedAt    DateTime @default(now())
  lastSeenAt  DateTime @default(now())
  isOnline    Boolean  @default(true)
  socketId    String?
  
  room      Room       @relation(fields: [roomId], references: [id], onDelete: Cascade)
  user      User?      @relation(fields: [userId], references: [id], onDelete: SetNull)
  messages  Message[]
  reactions Reaction[]
  
  @@unique([roomId, userId])
  @@index([roomId])
  @@index([userId])
}

model Reaction {
  id        String   @id @default(cuid())
  messageId String
  userId    String   // participant id
  emoji     String
  createdAt DateTime @default(now())
  
  message Message     @relation(fields: [messageId], references: [id], onDelete: Cascade)
  user    Participant @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([messageId, userId])
  @@index([messageId])
  @@index([userId])
}

model RateLimit {
  id        String   @id @default(cuid())
  key       String   @unique // IP address or user ID
  count     Int      @default(1)
  resetAt   DateTime
  createdAt DateTime @default(now())
  
  @@index([key, resetAt])
}
